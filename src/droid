1.安卓四大组件
    Activity：用户操作的可视化界面，setContentView()完成显示，在AndroidManifest中注册（不注册无法运行）
    Service：一般没有UI界面，作用在后台，不运行在独立进程
    ContentProvider内容提供器
    BroadcastReceiver广播接收器

2.广播类型：普通广播、有序广播
  普通广播是异步执行，发送之后所有接收器会收到
  有序广播是同步执行，发送之后会按照一定顺序进行传递，一次只有一个接收器收到广播

  广播的生命周期很短，一般只有10秒，如果在这段事件没有执行完操作会报ANR

3.Intent：显示和隐式
显示：Intent intent=new Intent(this,SecondActivity.class);
      startActivity(intent);
使用键值对传递数据

4.Activity的各种状态：onStart(),onResume(),onPause(),onStop(),onRestart(),onDestroy;
  Activity的启动过程：发起请求启动另一个Activity->通知当前应用暂停当前Activity->当前应用暂停Activity并返回结果->通知启动新的Activity

5.Activity的四种启动模式：Activity栈
    标准模式：创建时进栈，返回时出栈
    栈顶复用：创建时进栈，当新的Activity和栈顶Activity一样则不创建直接复用
    栈内复用：创建时进栈，当新的 Activity能在栈内被找到则弹出它上面的Activity并让这个Activity暴漏在栈顶
    全局唯一：创建时创建一个新的Activity栈并压入，当有重复activity时则唤醒
onSaveInstanceState默认保持Activity的状态，在onStop()前onPause()后被调用

6.Fragment
不能单独存在，需要和Activity绑定
Fragment的滑动需要和viewPager绑定

7.Activity和Service
绑定操作：定义一个内部类继承Binder，实例化onBind()，在activity中完成绑定
Activity启动service：Start：onCreate()->onStartCommand()->onDestory()
                     Bind:onCreate()->onBind()->onUnbind()->onDestory()

8.广播注册方式
静态注册：在AndroidManifest中注册，不受页面生命周期的影响
动态注册：在代码中注册

9.Volley，HttpClient与HttpUrlConnection
volley适用于数据量少请求量多的场景，对大文件的性能不好
HttpClient：以流的形式进行上传下载，API多，不易于扩展，Android M以后被弃用
HttpUrlConnection：API少，易于扩展

10.JVM和dalvik
JVM基于栈，运行的是Java字节码
dalvik基于寄存器，运行的是Java字节码转化来的.dex

11.进程保活
黑色保活：不同App之间通过广播相互唤醒
灰色保活：使用系统漏洞启动前台service
白色保活：启动前台service
进程的五个等级：前台、可见、服务、后台、空进程

12.Context
Context是一个抽象基类。在翻译为上下文，也可以理解为环境，是提供一些程序的运行环境基础信息。

13.Activity，View，Window
Activity构造时会初始化一个Window，Window里面有一个ViewRoot，ViewRoot通过AddView来添加View，View通过WindowManagerService监听操作，并回调Window

14.View的绘制流程
自定义控件：组合控件、继承原有控件、自定义控件
绘制流程：onMeasure()->onLayout()->onDraw()

15.View的分发机制
Touch事件分发中只有两个主角:ViewGroup和View。ViewGroup包含onInterceptTouchEvent、dispatchTouchEvent、onTouchEvent三个相关事件。View包含dispatchTouchEvent、onTouchEvent两个相关事件。其中ViewGroup又继承于View
ViewGroup和View组成树状结构
触摸事件由Action_Down、Action_Move、Aciton_UP组成，其中一次完整的触摸事件中，Down和Up都只有一个，Move有若干个，可以为0个。
当Acitivty接收到Touch事件时，将遍历子View进行Down事件的分发。ViewGroup的遍历可以看成是递归的。分发的目的是为了找到真正要处理本次完整触摸事件的View，这个View会在onTouchuEvent结果返回true。
当某个子View返回true时，会中止Down事件的分发，同时在ViewGroup中记录该子View。接下去的Move和Up事件将由该子View直接进行处理。
当ViewGroup中所有子View都不捕获Down事件时，将触发ViewGroup自身的onTouch事件
简述：如果一个事件传递到ViewGroup，则ViewGroup会dispatchTouchEvent，调用判断这个事件是否被拦截（onInterceptTouchEvent），若返回true则不继续分发，否则将事件分发到子View，当ViewGroup中所有子View都不捕获Down事件时，将触发ViewGroup自身的onTouch事件

16.几种动画
插值器和估值器：用于实现非线性动画
帧动画：指通过指定每一帧的图片和播放时间，有序的进行播放而形成动画效果
补间动画：指通过指定View的初始状态、变化时间、方式，通过一系列的算法去进行图形变换，从而形成动画效果
属性动画：不断绘制View

17.跨进程的通信方式
intent、contentProvider、service、广播

18.AIDL
每一个进程都有自己的Dalvik VM实例，都有自己的一块独立的内存，都在自己的内存上存储自己的数据，执行着自己的操作，AIDL提供进程之间的数据传输

19.Handler原理
Android中主线程是不能进行耗时操作的，子线程是不能进行更新UI的。所以就有了handler，它的作用就是实现线程之间的通信
handler四个对象：handler，Message，MessageQueue，Looper
我们通过要传送的消息保存到Message中，handler通过调用sendMessage方法将Message发送到MessageQueue中，Looper对象就会不断的调用loop()方法
不断的从MessageQueue中取出Message交给handler进行处理。从而实现线程之间的通信

20.内存溢出、内存泄漏
OOM...................
内存泄露原因：
一、Handler 引起的内存泄漏。解决：将Handler声明为静态内部类，就不会持有外部类SecondActivity的引用，其生命周期就和外部类无关，如果Handler里面需要context的话，可以通过弱引用方式引用外部类
二、单例模式引起的内存泄漏。解决：Context是ApplicationContext，由于ApplicationContext的生命周期是和app一致的，不会导致内存泄漏
三、非静态内部类创建静态实例引起的内存泄漏。解决：把内部类修改为静态的就可以避免内存泄漏了
四、非静态匿名内部类引起的内存泄漏。解决：将匿名内部类设置为静态的。
五、注册/反注册未成对使用引起的内存泄漏。注册广播接受器、EventBus等，记得解绑。
六、资源对象没有关闭引起的内存泄漏。在这些资源不使用的时候，记得调用相应的类似close（）、destroy（）、recycler（）、release（）等方法释放。
七、集合对象没有及时清理引起的内存泄漏。通常会把一些对象装入到集合中，当不使用的时候一定要记得及时清理集合，让相关对象不再被引用。

21.RecyclerView和ListView的区别
   RecyclerView可以完成ListView,GridView的效果，还可以完成瀑布流的效果。同时还可以设置列表的滚动方向（垂直或者水平）；
   RecyclerView中view的复用不需要开发者自己写代码，系统已经帮封装完成了。
   RecyclerView可以进行局部刷新。
   RecyclerView提供了API来实现item的动画效果。
   在性能上：
   如果需要频繁的刷新数据，需要添加动画，则RecyclerView有较大的优势。
   如果只是作为列表展示，则两者区别并不是很大。

22.